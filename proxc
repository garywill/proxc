#!/bin/bash

usage() {
###############################################################################
    cat << EOF
Usage: $PROGNAME [options] [-d <dns-ip>] [-p <proxy-type> <ip> <port>] -c <command>

    -h, --help              Show this help

    -c <command>            Command to run
    
    -p <proxy-type> <ip> <port>
                            Use proxychains to make processes use proxy
    -d <dns-ip>             Tell processes what DNS to see in /etc/resolv.conf
                            (using bubblewrap). Can be used more than once.
                            Usually not necessary when '-p' is used.
                            
    -q                      Quiet mode. Don't display any debug infomation
EOF
}

get_fd() {
    local x
    local tmpfile
    local _fd_var=$1
    
    for x in $(seq 10 $(ulimit -n)); do
        if [[ ! -a "/proc/$BASHPID/fd/$x" ]]; then
            tmpfile=$(mktemp /dev/shm/XXX.tmp)
            exec {x}<>$tmpfile 
            printf -v "$_fd_var" %s "$x"
            rm $tmpfile
            return
        fi
    done
    echo 0
}

DNS_IP=()

[[ ! "$1" ]] && usage && exit 0
while [[ -n "$1" ]]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -c)
            shift
            for i in "$@"
            do
                [[ "$i" =~ " " || "$i" =~ '\' ]] && i="\"$i\""
                #echo $i
                CMD="$CMD $i"
            done
            break
            ;;
        -p)
            shift
            PROXY_TYPE="$1"
            shift
            PROXY_IP="$1"
            shift
            PROXY_PORT="$1"
            shift
            ;;
        -d)
            shift
            DNS_IP+=("$1")
            shift
            ;;
        -q)
            shift
            QUIET_MODE=1
            ;;
        *)
            echo  "Invalid parameter: $1" 1>&2
            exit 1
            ;;
    esac
done

if [ ! "$CMD"  ] ; then
    echo "Command not specified"
    exit 1
fi

################################################

if [[ ! $QUIET_MODE ]]; then
    echo "Apply DNS/proxy to command: $CMD"
    echo ""
fi

if [[ ${#DNS_IP[@]} -gt 0 ]]; then
    echo -n "Set DNS:"
    get_fd dnsconf
    for (( i=0;i<${#DNS_IP[@]};i++ )); do
        if [[ ! $QUIET_MODE ]]; then
            echo -n " ${DNS_IP[$i]}"
        fi

        echo "nameserver ${DNS_IP[$i]}" >> "/dev/fd/$dnsconf"
    done
    echo ""
    BWRAP_WHOLE="bwrap --dev-bind / / --ro-bind-data $dnsconf $(readlink -m /etc/resolv.conf) --tmpfs $(readlink -m /var/run/nscd/)"

fi


if [[ "$PROXY_IP" ]]; then
    PROXYCHAINS_BIN="proxychains4"
    if [[ $QUIET_MODE -eq 1 ]]; then
        shift
        PROXYCHAINS_QUIET="-q"
    else
        echo "Use proxy ${PROXY_TYPE}://${PROXY_IP}:${PROXY_PORT}"
        echo ""
    fi
    
    get_fd conffile
    cat << EOF >&$conffile

# proxychains.conf  VER 4.x
strict_chain
proxy_dns 
#remote_dns_subnet 127 
#remote_dns_subnet 10
remote_dns_subnet 224
# Some timeouts in milliseconds
tcp_read_time_out 15000
tcp_connect_time_out 8000

localnet 127.0.0.0/255.0.0.0
# localnet 10.0.0.0/255.0.0.0
# localnet 172.16.0.0/255.240.0.0
# localnet 192.168.0.0/255.255.0.0

[ProxyList]
$PROXY_TYPE $PROXY_IP $PROXY_PORT

EOF

    PROXYCHAINS_WHOLE="\"$PROXYCHAINS_BIN\" $PROXYCHAINS_QUIET -f /dev/fd/$conffile"
fi




$BWRAP_WHOLE sh -c "$PROXYCHAINS_WHOLE $CMD"

result=$?

exit $result
